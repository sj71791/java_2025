■1. WEB
1. WEB
- TCP/IP 기반으로 연결되어 있는 컴퓨터네트워크
- 클라이언트 ↔ 서버
- 1)  Web    프로그래밍 (Http 통신)   단방향통신 
     ( Client요청시 Server응답 후종료)
- 2)  Socket 프로그래밍 (채팅)           양방향통신 
     ( 특정port를 통해 실시간으로 정보를 주고 받음 - 계속연결되어 있음) 

2. WS VS WAS
- WS (Web Server) : 정적콘텐츠 (html, css, js) 웹브라우저에 제공
   예) Apache
- WAS (Web Application Server) : 동적콘텐츠 
   브라우저와 dbms사이에 동작하는 미들웨어 
   예) Apache + tomcat

3. Tomcat
>> Http request (요청) > Catalina(해결사) > Context > Servlet > response

3-1) http request(요청)
3-2) Coyte가 해결사찾기 : http요청을 처리할 웹어플리케이션(context)
		      web.xml 파일내용을 참고해서 요청전달.
3-3) Catalina (Servlet) : 해결사
3-4) Jasper (Jsp Engine) : java+html 페이지 요청처리 응답(response)


■2. JSP

1. JSP 기본요소
- HTML + JAVA

1) 스크립트립 : <%      %>  자바코드
2) 지시자      : <%@    %> 
3) 주석         : <%--  --%>
4) 표현         : <%=    %> 출력
5) 선언         : <!%     %> 선언

2. FORM
: 서버쪽으로 정보전달
  action="요청처리"	  method="요청처리방식" (get, post)
  name="데이터보관이름"

3. 쿼리스트링
https://www.google.com/search?q=apple&name=sally

- url 뒤에 [입력데이터]를 함께 제공하는 데이터 전달방법
- get방식

- 클라이언트[#] ↔ 서버


4. request.getParameter("name값")
- 클라이언트 ↔ 서버[#]
- request.getParameter("q")


■3. 내장객체
1. request (요청)
 - request.getParameter("name"); 값한개
 - request.getParameterValues("name"); 값여러개 - checkbox

2. response (응답)
 - response.sendRedirect("처리경로"); response/request가 유지가 안됨.
   * response/request가 유지가 안됨.
   * 같은처리 alert 출력안됨.
   ※ location.href / meta http-equiv='refresh' content='초; url=경로'
 
 - request.getRequestDispatcher("경로").forward(request.response);
   * 요청과 응답 위임
   * response/request가 유지가 됨

3. scope 범위
   [ application(애플리케이션) > session(브라우저) > request(요청) > pageContext(페이지) ]

4. session
 - http 프로토콜 (데이터요청 - 응답을 받게되면 바로 종료)
 - 서버 측에 저장되는 정보
 - 보안

5. cookie
 - 클라이언트 측에 저장되는 정보
 - 보안상에 취약

6. error
 - 4xx (클라이언트 오류) 5xx (서버측에 오류)
 - 404 페이지 찾을 수 없음, 500 자바코드상에 오류
 - web.xml  에러설정

7. out
 - 출력


■4. mvc1 vs mvc2
1. MVC
 - 서로 영향없이 쉽게 고칠 수 있는 애플리케이션 


 - M : 애플리케이션의 정보 (db정보, dto, dao, 비지닉스 login 포함)
 - V : view 사용자가 사용하는 화면
 - C : controller  model과 view사이의 상호작용 관리

2. mvc1 vs mvc2
 - mvc1 - controller 역할을 jsp가 담당
 - mvc2 - controller 역할을 servlet이 담당


■5. dbcp
1. dbcp
 - 분산응용프로그램

2. 실습

1) 다운로드 
- apache.org -[commons] - dbcp, pool, collections
- https://commons.apache.org/

2) [WEB-INF] - [lib] JAR

3) DBCP - JAVA 파일 만들기
    https://tomcat.apache.org/

■server.xml
<Context>
  <Resource name="jdbc/mbasic" auth="Container" type="javax.sql.DataSource"
               maxTotal="100" maxIdle="30" maxWaitMillis="10000"
               username="root" password="1234" 
	  driverClassName="com.mysql.cj.jdbc.Driver"
               url="jdbc:mysql://localhost:3306/mbasic"/>

</Context>

■web.xml

<resource-ref>
      <description>DB Connection</description>
      <res-ref-name>jdbc/mbasic</res-ref-name>
      <res-type>javax.sql.DataSource</res-type>
      <res-auth>Container</res-auth>
  </resource-ref>

■DBCP연동
Context initContext = new InitialContext();
Context envContext  = (Context)initContext.lookup("java:/comp/env");
DataSource ds = (DataSource)envContext.lookup("jdbc/mbasic");
Connection conn = ds.getConnection();


■ PART002
#1. frontcontroller board 게시판 완성
#2. 개발사이트 api + ajax
#3. [숙제] - api 2개이상 / upgrade 기능업그레이드

1) dynamic web project - JOAbooks
2) inc - header/footer
3) error page 설정 - 404, 500
4) dbcp 연동

Project (2) Model
DB: table명 - board
글번호	bno	 int		not null 	auto_increment   primary key
글제목	btitle	 varchar(1000)	not null
글내용	bcontent	 text		not null
글쓴이	bname	 varchar(100)	not null
조회수	bit	 int				default 0
글쓴날짜	bdate	 timestamp	not null	default current_timestamp
아이피	bip	 varchar(100)	not null


--글비밀번호 bpass
Dto 	   : [com.company.domain] - BoardVO	 private
DBManager : [com.company.dbmanager] - DBManager
Dao :  [com.company.dao]    - BoardDao

........................................................................................................................
executeQuery - select (표)
executeUpdate - insert, update, delete (실행줄수)
참고2)
리턴값  메서드명( ) {}

 1. 글쓰기	          - insert into board( btitle, bcontent, bname, bip ) values ( ?,?,?,? );
    public int insert( BoardVO vo ){ return 0; }

 2. 최신글읽기      - select * from board order by bno desc
    public ArrayList<BoardVO> selectAll(  ){ return null; }

 3. 해당글읽기 /  해당글수정폼      - select * from board where bno=?
   public BoardVO select(int bno){ return null;  }

 4. 조회수증가      - update board set bhit=bhit+1 where bno=?
   public int updateHit( int bno ) { return 0; }

 5. 해당글수정기능 - update board set btitle=?, bcontent=? where bno=?
   public int update( BoardVO vo ){ return 0; }

 6. 해당글삭제      - delete from board where bno=?
   public int delete( int bno ){ return 0; }

[com.company.controller] - [FrontController]   *.do

[클라이언트 요청]   
↓
index.jsp  ->  *.do   [FrontController]
       ㄴ  /list.do           - C:전체리스트        BList        /      V:list.jsp 
       ㄴ  /write_view.do - C:X                                          V:write.jsp 
       ㄴ  /write.do        - C:글삽입             BWrite(알림창- 성공/실패) /   V: /list.do
       ㄴ  /detail.do      - C:해당번호 상세보기  BDetail(조회수올리기/해당글상세)
                                      V:detail.jsp
       ㄴ  /edit_view.do  - C:해당번호 글수정폼  BEditView(해당글상세)
                                      V:edit.jsp
       ㄴ  /edit.do       - C:해당번호 글수정기능 BEdit(해당글수정)
                                      V: /detail.do 
       ㄴ  /delete.do     - C:해당번호 글삭제기능 BDelete(해당글삭제)      V: /list.do

■ PART005 필요기능
1. el/jstl
> el
   - 표현식( 출력 )
   - before : <%= %>
   - after : ${ }
> jstl ( JavaServer page Standard Tag Library )
  - 자바코드 대신 태그로 웹페이지작성
  - before : <%= if() %>
  - after : <c:if test=></c:if> / <c:forEach items="" var=""><c/:forEach>

-1.  반복문, 조건문 등의 기본구현
-2.  사용법
 1. http://jakarta.apache.org/
 2. 왼쪽메뉴 :  Tablibs
 3. Standard Taglib -  다운로드 - jakarta-taglibs-standard-1.1.1.zip
 4. [WEB-INF]-[lib] - jstl.jar / standard.jar

-3. jstl 라이브러리
  core : 기본적인 기능제공
  fmt  : format 형식
  xml  : xml관련처리
  sql  : sql관련처리





2. admin만 글쓰기 (session 정리)

3. Naver api
[com.company.util] - Naverbook.java

4. ajax
http://localhost:8080/JOAbooks/list.jsp











 








