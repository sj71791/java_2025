■ STEP1. project
   - enc UTF-8
   - project

   연습) boot002 project 만들기

■ STEP2. setting (properties)
>> before
########################################
##           boot SETTING             ##
########################################
# WebApplication

# Banner

# DataSource Setting

# Jpa

# Logging

# Thymeleaf

- dto( lombok )

  연습 ) boot002
          1) application.properties 설정
	context-path=/boot2
	포트번호 8282
	application-type=	web으로 설정
          2) @Controller @ResponseBody 설정해서
	localhost:8282/boot2/ex1 접속시 - springboot 출력


■ STEP3. db
- jpa
	1) application.properties
	2) Entity - Dto / 테이블만들기
	3) @Repository - Dao
- ex)
	1) @Entity 이용해서 Member 테이블만들기
	2) @Repository 이용해서 MemberRepository
■ STEP4. view
1. pom.xml 셋팅확인
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>
<!--  https://mvnrepository.com/artifact/nz.net.ultraq.thymeleaf/thymeleaf-layout-dialect  -->
<!--  추가  -->
<dependency>
<groupId>nz.net.ultraq.thymeleaf</groupId>
<artifactId>thymeleaf-layout-dialect</artifactId>
</dependency>
<!--  추가  -->

2. application.properties 설정확인
3. layout
# Thymeleaf Setting 
spring.thymeleaf.cache=false
spring.thymeleaf.prefix=classpath:templates/
spring.thymeleaf.suffix=.html
4. 화면설정

■ STEP4. board
■ STEP5. security
1. spring security?
1) 애플리케이션의 보안(인증, 인가) 담당
2) filter의 흐름에 따라 처리

2. 인증 vs 인가
1) 인증 - 본인이 맞는지 확인	     여권)-본인이 맞는지 인증
2) 인가 - 인증된 사용자가 접근가능  조종석까지 가기 (X)

3. spring security 아키텍쳐 (1)
1) 사용자가 로그인폼 로그인시도 (username + password 전달)
2)  UsernamePasswordAuthentication  요청정보 - Authentication 생성 
3)  Authentication 인증처리

10) 인증완료 (사용자정보)  SecurityContextHolder에 담기
   - AuthenticationSuccessHandler 성공!
   - AuthenticationFailureHandler  실패!

4. spring security 아키텍쳐 (2)
4) Authentication Manager 인증담당
   - UsernamePasswordAuthenticaion Token은 Provider를 찾는데 사용
5) AuthenticationProvider - 로그인정보와 db정보를 비교
6) UserDetailService - db에 있는 사용자정보 가져오기

[실습]
1. spring project - pom.xml
2. localhost:8080/login 로그인창 -> 인증(본인확인)
3. SecurityConfig.java - 설정
4. Member @Entity
5. MemberRepository - crud (Dao)
6. MemberService
7. Controller
8. View













